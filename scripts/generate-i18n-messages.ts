import * as fs from "fs";
import {
    join as pathJoin,
    relative as pathRelative,
    dirname as pathDirname,
    sep as pathSep
} from "path";
import { assert, type Equals } from "tsafe/assert";
import { same } from "evt/tools/inDepth";
import { crawl } from "./tools/crawl";
import { downloadKeycloakDefaultTheme } from "./shared/downloadKeycloakDefaultTheme";
import { getThisCodebaseRootDirPath } from "../node_modules/keycloakify/src/bin/tools/getThisCodebaseRootDirPath";
import { deepAssign } from "../node_modules/keycloakify/src/tools/deepAssign";
import propertiesParser from "properties-parser";
import { keycloakifyExtraMessages } from "./generate-i18n-messages.login";

if (require.main === module) {
    generateI18nMessages();
}

async function generateI18nMessages() {
    type Dictionary = { [idiomId: string]: string };

    const messages: { [language: string]: Dictionary } = {};

    const { extractedDirPath } = await downloadKeycloakDefaultTheme();

    {
        const baseThemeDirPath = pathJoin(extractedDirPath, "base");
        const re = new RegExp(
            `^([^\\${pathSep}]+)\\${pathSep}messages\\${pathSep}messages_([^.]+).properties$`
        );

        crawl({
            dirPath: baseThemeDirPath,
            returnedPathsType: "relative to dirPath"
        }).forEach(filePath => {
            const match = filePath.match(re);

            if (match === null) {
                return;
            }

            const [, themeType_here, language] = match;

            if (themeType_here !== "login") {
                return;
            }

            messages[language.replace(/_/g, "-")] = Object.fromEntries(
                Object.entries(
                    propertiesParser.parse(
                        fs.readFileSync(pathJoin(baseThemeDirPath, filePath)).toString("utf8")
                    ) as Record<string, string>
                )
                    .map(([key, value]) => [key, value.replace(/''/g, "'")])
                    .map(([key, value]) => [key === "locale_pt_BR" ? "locale_pt-BR" : key, value])
                    .map(([key, value]) => [key, key === "termsText" ? "" : value])
            );
        });
    }

    const languages = Object.keys(messages);

    assert(
        same(languages, Object.keys(keycloakifyExtraMessages), {
            takeIntoAccountArraysOrdering: false
        })
    );

    deepAssign({
        target: messages,
        source: keycloakifyExtraMessages
    });

    const messagesDirPath = pathJoin(
        getThisCodebaseRootDirPath(),
        "src",
        "core",
        "i18n",
        "messages_defaultSet"
    );

    if (!fs.existsSync(messagesDirPath)) {
        fs.mkdirSync(messagesDirPath, { recursive: true });
    }

    fs.writeFileSync(
        pathJoin(messagesDirPath, "types.ts"),
        Buffer.from(
            [
                ``,
                `export const languageTags = ${JSON.stringify(languages, null, 2)} as const;`,
                ``,
                `export type LanguageTag = typeof languageTags[number];`,
                ``,
                `export type MessageKey = keyof typeof import("./en")["default"];`,
                ``
            ].join("\n"),
            "utf8"
        )
    );

    const generatedFileHeader = [
        `//This code was automatically generated by running ${pathRelative(
            getThisCodebaseRootDirPath(),
            __filename
        )}`,
        "//PLEASE DO NOT EDIT MANUALLY"
    ].join("\n");

    languages.forEach(language => {
        const filePath = pathJoin(messagesDirPath, `${language}.ts`);

        fs.mkdirSync(pathDirname(filePath), { recursive: true });

        fs.writeFileSync(
            filePath,
            Buffer.from(
                [
                    generatedFileHeader,
                    "",
                    "/* spell-checker: disable */",
                    `const messages= ${JSON.stringify(messages[language], null, 2)};`,
                    "",
                    "export default messages;",
                    "/* spell-checker: enable */"
                ].join("\n"),
                "utf8"
            )
        );

        //console.log(`${filePath} wrote`);
    });

    fs.writeFileSync(
        pathJoin(messagesDirPath, "index.ts"),
        Buffer.from(
            [
                generatedFileHeader,
                `import * as en from "./en";`,
                "",
                "export async function fetchMessages_defaultSet(currentLanguageTag: string) {",
                "    const { default: messages_defaultSet } = await (() => {",
                "        switch (currentLanguageTag) {",
                `            case "en": return en;`,
                ...languages
                    .filter(language => language !== "en")
                    .map(language => `            case "${language}": return import("./${language}");`),
                '            default: return { "default": {} };',
                "        }",
                "    })();",
                "    return messages_defaultSet;",
                "}"
            ].join("\n"),
            "utf8"
        )
    );
}
